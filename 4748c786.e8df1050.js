(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{100:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return b}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=a.a.createContext({}),l=function(e){var t=a.a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(r),d=n,b=p["".concat(c,".").concat(d)]||p[d]||f[d]||o;return r?a.a.createElement(b,s(s({ref:t},u),{},{components:r})):a.a.createElement(b,s({ref:t},u))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,c=new Array(o);c[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:n,c[1]=s;for(var u=2;u<o;u++)c[u]=r[u];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},77:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return c})),r.d(t,"metadata",(function(){return s})),r.d(t,"toc",(function(){return i})),r.d(t,"default",(function(){return l}));var n=r(3),a=r(7),o=(r(0),r(100)),c={id:"iac-source",title:"IaC Source"},s={unversionedId:"usage/cmd/scan/iac-source",id:"usage/cmd/scan/iac-source",isDocsHomePage:!1,title:"IaC Source",description:"Currently, driftctl only supports reading IaC from a Terraform state.",source:"@site/docs/usage/cmd/scan/iac-source.mdx",slug:"/usage/cmd/scan/iac-source",permalink:"/driftctl-docs/next/usage/cmd/scan/iac-source",editUrl:"https://github.com/cloudskiff/driftctl/docs/usage/cmd/scan/iac-source.mdx",version:"current",sidebar:"docs",previous:{title:"Known Issues and Limitations",permalink:"/driftctl-docs/next/limitations"},next:{title:"Output Format",permalink:"/driftctl-docs/next/usage/cmd/scan/output"}},i=[{value:"Supported IaC sources",id:"supported-iac-sources",children:[{value:"S3",id:"s3",children:[]}]}],u={toc:i};function l(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},u,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Currently, driftctl only supports reading IaC from a Terraform state.\nWe are investigating to support the Terraform code as well, as a state does not represent an intention."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Multiple states can be read by passing ",Object(o.b)("inlineCode",{parentName:"p"},"--from")," flags")),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"# I want to read a local state and a state stored in an S3 bucket:\n$ driftctl scan \\\n  --from tfstate+s3://statebucketdriftctl/terraform.tfstate \\\n  --from tfstate://terraform_toto.tfstate\n")),Object(o.b)("h2",{id:"supported-iac-sources"},"Supported IaC sources"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Terraform state",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Local: ",Object(o.b)("inlineCode",{parentName:"li"},"--from tfstate://terraform.tfstate")),Object(o.b)("li",{parentName:"ul"},"S3: ",Object(o.b)("inlineCode",{parentName:"li"},"--from tfstate+s3://my-bucket/path/to/state.tfstate"))))),Object(o.b)("h3",{id:"s3"},"S3"),Object(o.b)("p",null,"driftctl needs read-only access so you could use the policy below to ensure minimal access to your state file."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'{\n  "Version": "2012-10-17",\n  "Statement": [\n    {\n      "Effect": "Allow",\n      "Action": "s3:ListBucket",\n      "Resource": "arn:aws:s3:::mybucket"\n    },\n    {\n      "Effect": "Allow",\n      "Action": "s3:GetObject",\n      "Resource": "arn:aws:s3:::mybucket/path/to/my/key"\n    }\n  ]\n}\n')))}l.isMDXComponent=!0}}]);